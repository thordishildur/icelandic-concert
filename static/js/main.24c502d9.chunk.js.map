{"version":3,"sources":["ConcertItem.js","DatePicker.js","App.js","index.js"],"names":["ConcertItem","state","selected","date","dateObject","Date","parse","Intl","DateTimeFormat","year","month","day","hour","minute","format","this","setState","text","react_default","a","createElement","props","concert","eventHallName","prettyDate","dateOfShow","className","onClick","bind","src","imageSource","alt","eventDateName","Component","DatePicker","_this$props","from","to","moment","diff","getDayPicker","showMonth","onChange","_this","_this$props2","modifiers","start","end","DayPickerInput_default","value","placeholder","formatDate","parseDate","dayPickerProps","selectedDays","disabledDays","after","before","toMonth","numberOfMonths","onDayClick","getInput","focus","onDayChange","handleFromChange","ref","el","fromMonth","handleToChange","React","App","data","undefined","_this2","fetch","then","result","json","results","concertItem","setHours","filter","map","entry","index","src_ConcertItem_0","key","DatePicker_DatePicker","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.24c502d9.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport './ConcertItem.css';\n\nclass ConcertItem extends Component {\n    state = {\n        selected: false\n    }\n\n    prettyDate (date) {\n        const dateObject =  Date.parse(date)\n        return new Intl.DateTimeFormat('en-GB', { \n          year: 'numeric', \n          month: 'long', \n          day: '2-digit',\n          hour: 'numeric',\n          minute:'numeric'\n        }).format(dateObject)\n    }\n\n    onClick() {   \n        this.setState({selected: !this.state.selected})\n    }\n\n    render () {\n        let text = null;\n        if(this.state.selected) {\n            text = (<p>{this.props.concert.eventHallName}</p>)\n        } else {\n            text = (<p>{this.prettyDate(this.props.concert.dateOfShow)}</p>)\n        }\n        return (\n        <li className=\"concertItem\" onClick={this.onClick.bind(this)} >\n                <img src={this.props.concert.imageSource} alt=\"\"/>\n                <div className=\"eventDescription\">\n                    <h5>{this.props.concert.eventDateName}</h5>\n                    <p>{text}</p>\n                </div>\n        </li>\n        )\n    }\n}\n\nexport default ConcertItem","import React from 'react';\nimport moment from 'moment';\nimport './DatePicker.css';\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport 'react-day-picker/lib/style.css';\n\nimport { formatDate, parseDate } from 'react-day-picker/moment';\n\nexport default class DatePicker extends React.Component {\n  showFromMonth() {\n    const { from, to } = this.props;\n    if (!from) {\n      return;\n    }\n    if (moment(to).diff(moment(from), 'months') < 2) {\n      this.to.getDayPicker().showMonth(from);\n    }\n  }\n  handleFromChange(from) {\n    this.props.onChange(this.props.to,from);\n  }\n  handleToChange(to) {\n    this.props.onChange(to, this.props.from);\n  }\n  render() {\n    const { from, to } = this.props;\n    const modifiers = { start: from, end: to };\n    return (\n      <div className=\"InputFromTo\">\n        <DayPickerInput\n          value={from}\n          placeholder=\"Frá\"\n          format=\"LL\"\n          formatDate={formatDate}\n          parseDate={parseDate}\n          dayPickerProps={{\n            selectedDays: [from, { from, to }],\n            disabledDays: { after: to, before: new Date() },\n            toMonth: to,\n            modifiers,\n            numberOfMonths: 2,\n            onDayClick: () => this.to.getInput().focus(),\n          }}\n          onDayChange={this.handleFromChange.bind(this)}\n        />{' '}\n        —{' '}\n        <span className=\"InputFromTo-to\">\n          <DayPickerInput\n            ref={el => (this.to = el)}\n            value={to}\n            placeholder=\"Til\"\n            format=\"LL\"\n            formatDate={formatDate}\n            parseDate={parseDate}\n            dayPickerProps={{\n              selectedDays: [from, { from, to }],\n              disabledDays: { before: from },\n              modifiers,\n              month: from,\n              fromMonth: from,\n              numberOfMonths: 2,\n            }}\n            onDayChange={this.handleToChange.bind(this)}\n          />\n        </span>\n        </div>\n    );\n  }\n}","import React, { Component } from 'react'\nimport './App.css';\nimport ConcertItem from './ConcertItem'\nimport './index.css';\nimport DatePicker from './DatePicker';\n\nclass App extends Component {\n  state = {\n    data: [],\n    from: undefined,\n    to: undefined\n  }\n\n  // Code is invoked after the component is mounted/inserted into the DOM tree.\n  componentDidMount() {\n    const url =\n      'https://apis.is/concerts'\n\n    fetch(url)\n      .then(result => result.json())\n      .then(result => {\n        this.setState({\n          data: result.results,\n        })\n      })\n  }\n\n  onChange(to, from) {\n    this.setState( {\n      from: from,\n      to: to\n    })\n  } \n\n  filter(concertItem) {\n    const dateOfShow =  Date.parse(concertItem.dateOfShow);\n    const from = this.state.from;\n    const to = this.state.to;\n    if(from === undefined || to === undefined) {\n      return true;\n    }\n    from.setHours(0,0,0,0);\n    to.setHours(23,59,59,0);\n\n    if(from <= dateOfShow && to >= dateOfShow && from !== undefined && to !== undefined) {\n      return true;\n    }\n    return false;\n  }\n  \n  render() {\n    const { data } = this.state\n\n    const result = data.filter(this.filter.bind(this)).map((entry, index) => {\n      return <ConcertItem key={index} concert={entry}></ConcertItem>\n    }) \n\n    return (\n      <div>\n      <h1>Íslenzkir tónleikar</h1>\n      <DatePicker onChange={this.onChange.bind(this)} from={this.state.from} to={this.state.to}/>\n      <div className=\"parentDiv\">\n        <ul>{result}</ul>\n      </div>\n      </div>\n    )\n\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport DatePicker from 'react-date-picker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}